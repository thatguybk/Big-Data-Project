import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt

st.set_page_config(page_title="Natural Gas Environmental Impact", layout="wide")
# LOAD AND PRE CLEAN DATA

#Price of NG Imports
price_df = pd.read_csv("data/Natural_Gas_Import_Price.csv", skiprows=2, parse_dates=["Date"])
price_df = price_df.rename(columns={"Price of U.S. Natural Gas Imports (Dollars per Thousand Cubic Feet)": "Price ($/Mcf)"})
price_df["Date"] = pd.to_datetime(price_df["Date"])
price_df["Date"] = pd.to_datetime(price_df["Date"]).dt.to_period("M").dt.to_timestamp()
price_df = price_df.dropna(subset=["Date", "Price ($/Mcf)"])


#Quantity of NG Imports
import_df = pd.read_csv("data/Natural_Gas_Import_Quantity.csv", skiprows=2, parse_dates=["Date"])
import_df.columns = ["Date", "Imports (MMcf)"]
import_df["Date"] = pd.to_datetime(import_df["Date"])
import_df["Date"] = pd.to_datetime(import_df["Date"]).dt.to_period("M").dt.to_timestamp()
imports_df = import_df.dropna(subset=["Date", "Imports (MMcf)"])


#NG Production
quantityProduced_df = pd.read_csv("data/Natural_Gas_Plant_Processing.csv", skiprows=6, sep=None, engine="python")
quantityProduced_df = quantityProduced_df.rename(columns={"Month": "Date", "U.S. Natural Gas Plant Liquids Production MMcf": "Production (MMcf)"})
quantityProduced_df.columns = ["Date", "Production (MMcf)"]
quantityProduced_df["Date"] = pd.to_datetime(quantityProduced_df["Date"], errors="coerce")
quantityProduced_df["Date"] = pd.to_datetime(quantityProduced_df["Date"]).dt.to_period("M").dt.to_timestamp()
quantityProduced_df = quantityProduced_df.sort_values("Date", ascending=False).reset_index(drop=True)
quantityProduced_df = quantityProduced_df[quantityProduced_df["Date"].dt.year > 1989]
quantityProduced_df = quantityProduced_df.dropna(subset=["Date", "Production (MMcf)"])


#NG Consumption
ngConsumption_df = pd.read_csv("data/Natural_Gas_Deleiveries_to_Electric_Power_Consumers.csv", skiprows=2)
ngConsumption_df = ngConsumption_df.rename(columns={ "U.S. Natural Gas Deliveries to Electric Power Consumers (MMcf)": "Consumption (MMcf)"})
ngConsumption_df["Date"] = pd.to_datetime(ngConsumption_df["Date"]).dt.to_period("M").dt.to_timestamp()
ngConsumption_df = ngConsumption_df.dropna(subset=["Date", "Consumption (MMcf)"])

#temperature Data
temp_df = pd.read_csv("data/TempData.csv", skiprows=3)
temp_df = temp_df.rename(columns={"Date": "Date", "Value": "Temperature (F)"})
temp_df["Date"] = temp_df["Date"].astype(str)  # Convert to string
temp_df["Date"] = pd.to_datetime(temp_df["Date"], format="%Y%m")  # Convert to datetime
temp_df["Date"] = pd.to_datetime(temp_df["Date"]).dt.to_period("M").dt.to_timestamp()
temp_df = temp_df[temp_df["Date"].dt.year > 1989]
temp_df = temp_df.dropna(subset=["Date", "Temperature (F)"])

#Solar energy Generation
solar_df = pd.read_csv("data/Solar_Energy_Generation.csv", skiprows=4)
#Standarzing column names
solar_df = solar_df.rename(columns={"Month": "Date", "all utility-scale solar thousand megawatthours": "Solar Generation (1000 MWh)"})
solar_df.columns = ["Date", "Solar Generation (1000 MWh)"]
# Convert 'Month' column to datetime
solar_df["Date"] = pd.to_datetime(solar_df["Date"])
# Sort the DataFrame by date
solar_df = solar_df.sort_values("Date")
solar_df = solar_df.reset_index(drop=True)
solar_df =solar_df[solar_df["Date"].dt.year < 2025]
solar_df["Date"] = pd.to_datetime(solar_df["Date"]).dt.to_period("M").dt.to_timestamp()
#Drop NAN values
solar_df = solar_df.dropna(subset=["Date", "Solar Generation (1000 MWh)"])

#Solar Irradiance data
irradiance_df = pd.read_csv("data/consolidated_solar_irradiance.csv")
irradiance_df = irradiance_df.drop(columns=["Source_File"])
irradiance_df['Date'] = pd.to_datetime(irradiance_df['Date'])

#power generated by NG
ng_power_generation = pd.read_csv("data/Net_generation_for_all_sectors_monthly.csv", skiprows=4)
ng_power_generation = ng_power_generation.rename(columns={"Month": "Date", "natural gas thousand megawatthours" : "Natural Gas Generation (1000 MWh)"})
ng_power_generation = ng_power_generation.dropna(subset=["Date", "Natural Gas Generation (1000 MWh)"])
ng_power_generation["Date"] = pd.to_datetime(ng_power_generation["Date"]).dt.to_period("M").dt.to_timestamp()

#avg cost to generate electricity from NG
ng_avg_cost = pd.read_csv("data/avg_cost_to_generate_electricity.csv", skiprows=4)
ng_avg_cost = ng_avg_cost.rename(columns={"Month": "Date", "United States : natural gas dollars per mcf" : "Natural Gas Avg Cost ($/Mcf)"})
ng_avg_cost = ng_avg_cost.dropna(subset=["Date", "Natural Gas Avg Cost ($/Mcf)"])
ng_avg_cost["Date"] = pd.to_datetime(ng_avg_cost["Date"]).dt.to_period("M").dt.to_timestamp()


#MERGE 

allmerged_df = temp_df.merge(price_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(imports_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(quantityProduced_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(solar_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(ngConsumption_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(irradiance_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(ng_power_generation, on="Date", how="outer")
allmerged_df = allmerged_df.merge(ng_avg_cost, on="Date", how="outer")
# Sort and reset index
allmerged_df = allmerged_df.sort_values("Date").reset_index(drop=True)
# Drop rows with no useful data
main_cols = ["Temperature (F)", "Price ($/Mcf)", "Imports (MMcf)", "Production (MMcf)", "Solar Generation (1000 MWh)", "Consumption (MMcf)", "Clearsky DHI", "Clearsky GHI", "Clearsky DNI", "GHI", "DHI", "DNI", "Natural Gas Generation (1000 MWh)", "Natural Gas Avg Cost ($/Mcf)"]
allmerged_df = allmerged_df.dropna(subset=main_cols, how="all")

allmerged_df.to_csv("cleaned_merged_dataset.csv", index=False)

allmerged_df = allmerged_df[allmerged_df["Date"].dt.year > 1998]
# Sort and reset index
allmerged_df = allmerged_df.sort_values("Date").reset_index(drop=True)
print(allmerged_df.tail(100))
print(allmerged_df.head(100))
print(allmerged_df.dtypes)



carbon_dioxide_df = pd.read_csv("data/Carbon Dioxide Emissions From Energy Consumption.csv")
carbon_dioxide_df = carbon_dioxide_df[carbon_dioxide_df["Description"] == "Natural Gas Electric Power Sector CO2 Emissions"]

carbon_dioxide_df = carbon_dioxide_df[["YYYYMM", "Value"]].rename(columns={
    "YYYYMM": "Date",
    "Value": "CO2 Emissions (Million Metric Tons)"
})

carbon_dioxide_df["Date"] = pd.to_datetime(carbon_dioxide_df["Date"].astype(str), format='%Y%m', errors='coerce').dt.to_period("M").dt.to_timestamp()

carbon_dioxide_df = carbon_dioxide_df.dropna(subset=["Date"])
carbon_dioxide_df = carbon_dioxide_df.sort_values("Date").reset_index(drop=True)
carbon_dioxide_df = carbon_dioxide_df[carbon_dioxide_df["Date"].dt.year > 1998]

# with st.expander("Carbon Dioxide DataFrame:"):
#      st.subheader("Head")
#      st.write(carbon_dioxide_df.head())
#      st.subheader("Tail")
#      st.write(carbon_dioxide_df.tail())

# Load and process natural-gas-prices.csv
ng_energy_generation_prices_df = pd.read_csv("data/natural-gas-prices.csv")
ng_energy_generation_prices_df = ng_energy_generation_prices_df[['Year', 'Gas price']].rename(columns={'Gas price': 'Price ($/MWh)'})

# Display info
# with st.expander("Natural Gas Prices DataFrame:"):
#     st.subheader("Head")
#     st.write(ng_energy_generation_prices_df.head())
#     st.subheader("Tail")
#     st.write(ng_energy_generation_prices_df.tail())

# Load and process levelized-cost-of-energy.csv
lcoe_df = pd.read_csv("data/levelized-cost-of-energy.csv")
lcoe_df = lcoe_df[['Year', 'Solar photovoltaic levelized cost of energy']]
lcoe_df = lcoe_df.rename(columns={'Solar photovoltaic levelized cost of energy': 'Solar LCOE ($/KWh)'})
lcoe_df = lcoe_df.dropna(subset=['Solar LCOE ($/KWh)'])

# Display info
# with st.expander("Levelized Cost of Energy DataFrame:"):
#     st.subheader("Head")
#     st.write(lcoe_df.head())
#     st.subheader("Tail")
#     st.write(lcoe_df.tail())

# Sum monthly values for ng_power_generation
ng_power_yearly = ng_power_generation.copy()
ng_power_yearly['Year'] = ng_power_yearly['Date'].dt.year
ng_power_yearly = ng_power_yearly.groupby('Year', as_index=False)['Natural Gas Generation (1000 MWh)'].sum()

# Display info
# with st.expander("Yearly Natural Gas Generation DataFrame:"):
#     st.subheader("Head")
#     st.write(ng_power_yearly.head())
#     st.subheader("Tail")
#     st.write(ng_power_yearly.tail())

# Merge gas prices with yearly energy generation
merged_gas = pd.merge(ng_energy_generation_prices_df, ng_power_yearly, on='Year', how='inner')

# Display info
# with st.expander("Merged Gas Prices & Generation DataFrame:"):
#     st.subheader("Head")
#     st.write(merged_gas.head())
#     st.subheader("Tail")
#     st.write(merged_gas.tail())

# Merge LCOE with yearly energy generation
merged_lcoe = pd.merge(lcoe_df, ng_power_yearly, on='Year', how='inner')

# Display info
# with st.expander("Merged LCOE & Generation DataFrame:"):
#     st.subheader("Head")
#     st.write(merged_lcoe.head())
#     st.subheader("Tail")
#     st.write(merged_lcoe.tail())
    
# Calculate Natural Gas Cost (in USD)
merged_gas['Natural Gas Cost ($ USD)'] = (
    merged_gas['Natural Gas Generation (1000 MWh)'] * 1000 *  # Convert to MWh (1 thousand MWh = 1,000 MWh)
    merged_gas['Price ($/MWh)']
)

# Calculate Solar Cost (in USD)
merged_lcoe['Solar Cost ($ USD)'] = (
    merged_lcoe['Natural Gas Generation (1000 MWh)'] * 1000 * 1000 *  # Convert to kWh (1 thousand MWh = 1,000,000 kWh)
    merged_lcoe['Solar LCOE ($/KWh)']
)

# Create comparison dataframe
comparison_df = pd.merge(
    merged_gas[['Year', 'Natural Gas Cost ($ USD)']],
    merged_lcoe[['Year', 'Solar Cost ($ USD)']],
    on='Year',
    how='inner'
)

# # Add energy generation column for reference
# comparison_df = pd.merge(
#     comparison_df,
#     ng_power_yearly[['Year', 'Natural Gas Generation (1000 MWh)']],
#     on='Year',
#     how='left'
# )

# # Rename for clarity
# comparison_df = comparison_df.rename(columns={
#     'Natural Gas Generation (1000 MWh)': 'Energy Generated (1000 MWh)'
# })

# Display info
# with st.expander("Total cost of natural and solar:"):
#     st.subheader("Head")
#     st.write(comparison_df.head())
#     st.subheader("Tail")
#     st.write(comparison_df.tail())



st.title(" Renewable Energy Feasibility Dashboard (USA)")
st.markdown("This dashboard provides insights into the environmental impact of natural gas imports in the United States and the associated economic strain of implementing Solar power generation.") 
st.markdown("Our goal is to explore the economic implications of natural gas imports and solar power generation in the United States of America. We analyze the trends in natural gas prices and quantities imported, as well as the growth of solar energy generation over time. This analysis will help understand the potential benefits or disadvantages of transitioning to renewable energy sources. We also explore at what year it would make the most sense to implement Solar Power in the form of Photovoltaic cells, to match the amount of energy generated using natural gas.")

st.markdown("There are many Factors that affect the price of natural gas imports including weather, temperature, natural disasters and other events that disrupt supply chains. We explore these factors in the following sections.")

st.subheader("Natural Gas Import Price (1999 - 2024)")

fig = px.bar(
    allmerged_df,
    x="Date",
    y="Price ($/Mcf)",
    color_discrete_sequence=["steelblue"]
)

st.plotly_chart(fig, use_container_width=True)




st.markdown("The price of natural gas has fluctuated over the years, with notable peaks and troughs. This data is crucial for understanding the economic implications of natural gas imports and the potential benefits of transitioning to renewable energy sources. In October 2005, according to the U.S. Energy Information Administration (EIA), the price of natural gas imports was at an all time high of 11.99 USD per thousand cubic feet (USD/Mcf). This was a significant increase from the previous year, when the price was around 5.38 (USD/Mcf). The increase in price was attributed to several factors, including production disruption and increased demand for natural gas due to Hurricane Katrina, Hurricane Rita and other weather-related events that disrupted supply and production chains. Prices also spiked to 9.11 (USD/Mcf) in February 2014 when compared to previous months and years where prices were around 3 to 4 (USD/Mcf) due to extremely cold weather. Another sudden rise in price occurred in December 2022. This was likely due to several reasons such as the Russian invasion of Ukraine, increased global demand for LNG and supply chain disruptions caused by the Covid-19 pandemic.")

st.subheader("Temperature (1999 - 2025)")
st.markdown("This chart illustrates the temperature trends in the U.S from 1999 to 2025.")
fig = px.line(allmerged_df.dropna(subset=["Temperature (F)"]), x="Date", y="Temperature (F)")
# Display in Streamlit
st.plotly_chart(fig)
st.markdown("The data shows a steady increase in temperature, which is consistent with the global trend of rising temperatures due to climate change. In other words, there are higher highs and higher lows. The lowest average temperature was in February 2010 due to a blizzard whereas the highest average temperature was in November 2024 due to increased greenhouse gas emissions and ocean heat absorption. The data also shows seasonal variations, with higher temperatures in the summer months and lower temperatures in the winter months. As temperature decreases the demand for natural gas increases, leading to higher prices. The data shows a clear correlation between temperature and the price of natural gas imports. For example, in February 2014, the average temperature in the U.S was significantly lower than in previous years, leading to a spike in natural gas import prices. This trend is also evident in the winter of 2000/2001, when low temperatures led to increased demand for natural gas and higher prices.")



#print(allmerged_df[["Price ($/Mcf)", "Temperature (F)"]].isna().sum())
#print(allmerged_df[["Price ($/Mcf)", "Temperature (F)"]].dropna().shape)

#print(allmerged_df[["Price ($/Mcf)", "Temperature (F)"]].info())
#print(allmerged_df[["Price ($/Mcf)", "Temperature (F)"]].head(10))


corr_df = allmerged_df[["Price ($/Mcf)", "Temperature (F)", "Date"]].dropna(subset=["Price ($/Mcf)", "Temperature (F)"])

#corr_df["Date"] = pd.to_datetime(corr_df["Date"]).dt.to_period("M").dt.to_timestamp()
#corr_df = corr_df[corr_df["Date"].dt.year > 1998]
print(corr_df.head())

# Compute correlation matrix
correlation = corr_df[["Price ($/Mcf)", "Temperature (F)"]].corr()

# Plot the correlation heatmap
st.subheader("Correlation Between Temperature and Natural Gas Import Price")
fig, ax = plt.subplots(figsize=(4,1.8))
sns.heatmap(correlation, annot=True, cmap="RdGy" , fmt=".2f", ax=ax)
st.pyplot(fig)


# --- Add Season Column ---
def get_season(month):
    if month in [12, 1, 2, 3]:
        return "Winter"
    elif month in [4, 5]:
        return "Spring"
    elif month in [6, 7, 8]:
        return "Summer"
    else:
        return "Autumn"

corr_df["Season"] = corr_df["Date"].dt.month.apply(get_season)

# --- Calculate correlations for each season ---
season_correlations = corr_df.groupby("Season")[["Temperature (F)", "Price ($/Mcf)"]].corr().iloc[0::2, -1].reset_index()

# Display season correlations
print("Seasonal correlations between temperature and gas price:")
print(season_correlations)

# Visualize as bar chart
fig, ax = plt.subplots(figsize=(7,2))
sns.barplot(data=season_correlations, x="Season", y="Price ($/Mcf)", palette="Accent", ax=ax)
ax.set_title("Correlation Between Temperature and Gas Price by Season")
ax.set_ylabel("Correlation Coefficient")
ax.set_ylim(-1, 1)
ax.axhline(0, color='gray', linestyle='--')

# Display in Streamlit
st.pyplot(fig)


st.markdown("The correlation between temperature and natural gas price is significant, with a correlation coefficient of {:.3f}. This indicates the existence of an inverse relationship between temperature and natural gas price. This means that as temperature decreases, the price of natural gas increases. The data also shows a seasonal pattern, with higher prices in the winter months when demand for natural gas is highest.".format(correlation.loc['Temperature (F)', 'Price ($/Mcf)']))

st.markdown("The correlation coefficient for each season is as follows:")
for season, corr in zip(season_correlations['Season'], season_correlations['Price ($/Mcf)']):
    st.markdown(f"- **{season}:** {corr:.3f}")

st.markdown("Since the Winter season has the largest negative correlation coefficient, the inverse relationship between temperature and natural gas price is more pronounced than in the other seasons. The correlation is skewed due to other factors, such as natural disasters and supply chain disruptions, affecting the price of natural gas.")



total_imports = allmerged_df[["Imports (MMcf)", "Price ($/Mcf)", "Date"]].copy()
total_imports["Total Import Cost"] = total_imports["Price ($/Mcf)"] * ( total_imports["Imports (MMcf)"] * 1000)
total_imports = total_imports.dropna(subset=["Total Import Cost"])

#Total cost to import over the years
st.subheader("Total Natural Gas Import Cost (1999 - 2024)")
fig = px.line(
    total_imports,
    x="Date",
    y="Total Import Cost",
    #title="Total Natural Gas Import Cost (1989 - 2024)",
    labels={"Total Import Cost": "Total Import Cost (USD)"}
)

# Display in Streamlit
st.plotly_chart(fig)

st.markdown("By multiplying the import prices of natural gas by the quantities imported, we can see the total costs to import natural gas. The import price of natural gas is listed in the dataset as per thousand cubic feet ($/Mcf), and the quantity dataset displays the values int the unit of million cubic feet (MMcf). To normalize these values, we multiply the quantity by 1000 then multiply the result by the cost to get the total cost incurred by the US for importing natural gas. Nearing the end of 2005 the total costs to import natural gas spiked to around 4.4 Billion USD. This is likely due to the devastating hurricanes that occurred around that time. In April 2020, the total costs to import natural gas dropped to around 285 Million USD. This is likely due to the Covid-19pandemic and a surplus of natural gas imported and produced in the previous months.")

st.subheader("U.S. Natural Gas Import Quantities (1999 - 2024)")
fig = px.line(
    total_imports,
    x="Date",
    y="Imports (MMcf)",
    labels={"U.S. Natural Gas Imports (MMcf)": "Natural Gas Imported (MMcf)"}
)

st.plotly_chart(fig)
st.markdown("The quantity of natural gas imported into the US has fluctuated over the years, with notable peaks and troughs. The data shows a steady increase in the quantity of natural gas imported until 2008, reflecting the growing demand for natural gas in the US. After 2008 the US increased its domestic production of natural gas. The data also shows seasonal variations, with higher imports in the winter months and lower imports in the summer months. This trend is consistent with the seasonal demand for natural gas.")





st.subheader("Natural Gas Production Data (1999 - 2024)")
fig = px.line(allmerged_df[["Production (MMcf)", "Date"]], x="Date", y="Production (MMcf)")
fig.update_layout(yaxis_title="Natural Gas Produced (Million Cublic Feat MMcf)", xaxis_title="Date")
# Display in Streamlit
st.plotly_chart(fig)
st.markdown("U.S Natural Gas production hit an all time high in 2024 after gradually increasing in quantity over the years. Import prices for natural gas were also slightly increasing as production quantities increased in 2024. When compared to natural gas import quantities, it can also be seen that an inverse relationship exists where the quantity of natural gas produced decreases as the quantity of natural gas imports increase.")


corr_df = allmerged_df[["Production (MMcf)", "Imports (MMcf)", "Date"]].dropna(subset=["Production (MMcf)", "Imports (MMcf)"])

print(corr_df.head())

# Compute correlation matrix
correlation = corr_df[["Production (MMcf)", "Imports (MMcf)"]].corr()

# Plot the correlation heatmap
st.subheader("Correlation Matrix: Natural Gas Imports vs Production")
fig, ax = plt.subplots(figsize=(4, 1.8))
sns.heatmap(correlation, annot=True, cmap="crest", ax=ax)
st.pyplot(fig)

st.markdown(f"The above graphs show a negative correlation of {correlation.iloc[0, 1]:.2f}. This indicates an inverse relationship between the quantity of natural gas produced and the quantity of natural gas imported. This means that as the quantity of natural gas imports decreases, the quantity of natural gas produced increases. This trend is consistent with the growing domestic production of natural gas in the US, which has led to a decrease in imports.")






#------------------SPLIT DIAGRAMS INTO TWO AND MOVE HIGHER UP TO CORRESPONDING AREAS------------------------


merged_df4 = allmerged_df[["Date",  "Imports (MMcf)", "Price ($/Mcf)"]].copy()
# Create Month Name and Number for ordering
merged_df4["Month Name"] = merged_df4["Date"].dt.strftime('%B')
merged_df4["Month Number"] = merged_df4["Date"].dt.month

# Sort for correct month order
merged_df4 = merged_df4.sort_values("Month Number")

# Define order explicitly
month_order = pd.date_range("2000-01-01", periods=12, freq="M").strftime("%B")


# Create boxplots
fig, axes = plt.subplots(1, 1, figsize=(10, 4), sharex=False)

# # 1. Imports
# sns.boxplot(
#     data=merged_df4,
#     x="Month Name",
#     y="Imports (MMcf)",
#     order=month_order,
#     ax=axes[0],
#     palette="crest",
#     width=0.5
# )
# axes[0].set_title("Seasonal Distribution of Natural Gas Imports")

#====SPLIT INTO TWO PAGES NOT TWO PLOTS ON THE SAME PAGE=====

# 3. Prices
sns.boxplot(
    data=merged_df4,
    x="Month Name",
    y="Price ($/Mcf)",
    order=month_order,
    ax=axes,
    palette="BuPu",
    width=0.5
)
axes.set_title("Seasonal Distribution of Natural Gas Import Prices")
axes.set_xlabel("Month")

plt.xticks(ticks=range(0, 12), labels=[
    "Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
], fontsize=10)

# Rotate x-axis labels for clarity


ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')
ax.set_xlabel("-------------------------------------------------------------------------------------------------------------------------------------------- Month --------------------------------------------------------------------------------------------------------------------------------------------")
ax.grid(axis='y', linestyle='--', alpha=0.5)

# Display the plot
plt.tight_layout(pad=2.5)
st.pyplot(fig)






#KEY HIGHLIGHTS

# 1. Highest Monthly Import
max_import_row = allmerged_df.loc[allmerged_df["Imports (MMcf)"].idxmax()]
max_import_value = max_import_row["Imports (MMcf)"]
max_import_date = max_import_row["Date"].strftime("%b %Y")

# 2. Year with Highest Production
yearly_production = allmerged_df.groupby("Date")["Production (MMcf)"].sum()
highest_production_year = yearly_production.idxmax()
highest_production_value = yearly_production.max()

# 3. Month with Highest Cost
max_cost_row = total_imports.loc[total_imports["Total Import Cost"].idxmax()]
max_cost_value = max_cost_row["Total Import Cost"]
max_cost_date = max_cost_row["Date"].strftime("%b %Y")




# Display metrics
st.subheader("📊 Key Highlights")

col1, col2, col3 = st.columns(3)

with col1:
    st.metric(label="📈 Highest Monthly Import", value=f"{max_import_value:,.0f} MMcf", delta=max_import_date)

with col2:
    st.metric(label="🏭 Highest Production Year", value=f"{highest_production_year.year}", delta=f"{highest_production_value:,.0f} units")

with col3:
    st.metric(label="💰 Highest Monthly Import Cost", value=f"${max_cost_value:,.0f}", delta=max_cost_date)













#STACKED BAR GRAPH OF CONSUMPTION VS PRODUCTION

#bar_df = allmerged_df[["Date", "Consumption (MMcf)", "Production (MMcf)", "Imports (MMcf)"]].copy()  


#fig, ax = plt.subplots(figsize=(12, 6))
#ax.bar(bar_df.index, bar_df["Production (MMcf)"], label="Production", color="skyblue")
#ax.bar(bar_df.index, bar_df["Consumption (MMcf)"], bottom=bar_df["Production (MMcf)"], label="Consumption", color="orange")
#ax.bar(bar_df.index, bar_df["Imports (MMcf)"], bottom=bar_df["Production (MMcf)"], label="Imports", color="red")

#ax.set_title("Natural Gas Consumption vs Production", fontsize=18)
#ax.set_xlabel("Month", fontsize=12)
#ax.set_ylabel("Volume (MMcf)", fontsize=12)
#ax.legend()
#ax.grid(axis='y', linestyle='--', alpha=0.7)
#plt.xticks(rotation=45)

# Show in Streamlit
#st.pyplot(fig)

# -----------------------------------------------------ADAM OLD GRAPHS---------------------------------------
solar_pv_module_df = pd.read_csv("data/solar-pv-prices.csv")
solar_pv_module_df = solar_pv_module_df[['Year', 'Solar photovoltaic module price']]
solar_pv_module_df = solar_pv_module_df.rename(columns={'Solar photovoltaic module price': 'Solar PV Module Price($)'})

st.subheader("Solar Photovoltaic (PV) Module Price Distribution Over Years")
fig = px.bar(
    solar_pv_module_df,
    x="Year",
    y="Solar PV Module Price($)",
    color_discrete_sequence=["steelblue"]
)
st.plotly_chart(fig, use_container_width=True)
st.markdown("Write paragraph here")
# -----------------------------------------------------ADAM OLD GRAPHS---------------------------------------


# irradiance = allmerged_df[["Date", "GHI"]].copy()

# st.subheader('Average GHI over time (w/m^2) (1999-2023)')
# st.line_chart(irradiance.set_index('Date'))
# st.markdown("As seen in the graph above, there is a steady and constant fluctuation of GHI levels throughout the year. GHI usually peaks during summer months and then drops in the winter months.This makes sense as during summer there are usually more sunlight and irradiance for the solar panels whereas during winter there is less sunlight and irradiance due to snowfall and cold weather.")

#-----------------------------------------------------ADAM NEW CODE---------------------------------------
# Loading merged and cleaned dataset
df = pd.read_csv("cleaned_merged_dataset.csv", parse_dates=["Date"])

# Filter relevant columns for solar analysis
adam_solar_df = df[["Date", "Solar Generation (1000 MWh)", "Clearsky GHI", "GHI"]].dropna().copy()

# Convert to correct datetime format
adam_solar_df["Year"] = adam_solar_df["Date"].dt.year

# CORRELATION BETWEEN SOLAR GENERATION AND GHI
st.header("🔍 Correlation Analysis: Solar Generation vs. Irradiance")

solar_corr_matrix = adam_solar_df[["Solar Generation (1000 MWh)", "GHI"]].corr()

fig_corr, ax = plt.subplots(figsize=(4, 2))
sns.heatmap(solar_corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", ax=ax)
ax.set_title("Correlation Matrix: Solar Generation and GHI Metrics", fontsize=8)

st.pyplot(fig_corr)

st.markdown("""
The correlation heatmap above indicates the strength of relationships between solar generation and irradiance metrics.  
A strong positive correlation between solar generation and actual GHI implies better generation performance under high irradiance.
""")
# -----------------------------------------------------ADAM NEW CODE---------------------------------------

generation = allmerged_df[["Date", "Natural Gas Generation (1000 MWh)", "Solar Generation (1000 MWh)"]].copy()
st.subheader('Natural Gas Generation vs Solar Generation (1000 MWh) (2001-2025)')
st.line_chart(generation.set_index('Date'))
st.markdown("finish this writeup")

emissions_merged = allmerged_df.merge(carbon_dioxide_df, on="Date", how="inner")
corr_data = emissions_merged[[
    "CO2 Emissions (Million Metric Tons)",
    "Natural Gas Generation (1000 MWh)", 
    "Solar Generation (1000 MWh)"
]].corr()

# Visualize
st.subheader("Emission-Energy-Temperature Correlations")
fig, ax = plt.subplots(figsize=(4,2))
sns.heatmap(corr_data, annot=True, cmap="viridis", fmt=".2f", 
            annot_kws={"size":12}, linewidths=.5, ax=ax)
ax.set_title("Correlation Between Key Metrics", pad=20)
st.pyplot(fig)
st.markdown("Writeup here")

corr_matrix = allmerged_df[["Natural Gas Generation (1000 MWh)", "Temperature (F)"]].corr()

# Create heatmap using seaborn
fig, ax = plt.subplots(figsize=(6, 4))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", ax=ax)
ax.set_title("Correlation Matrix: Natural Gas Generation vs Temperature", fontsize=14)

# Display using Streamlit
st.subheader("Natural Gas Generation & Temperature Correlation")
st.pyplot(fig)







# Copy and prepare data
monthly_df = allmerged_df[["Date", "Natural Gas Generation (1000 MWh)", "Temperature (F)"]].copy()
monthly_df.dropna(inplace=True)

# Convert Date to datetime and filter year range
monthly_df["Date"] = pd.to_datetime(monthly_df["Date"], errors="coerce")
monthly_df = monthly_df[(monthly_df["Date"].dt.year >= 2001) & (monthly_df["Date"].dt.year <= 2025)]

# Extract month number
monthly_df["Month"] = monthly_df["Date"].dt.month

# Correlation for each month
correlations = []
for month in range(1, 13):
    subset = monthly_df[monthly_df["Month"] == month]
    if not subset.empty:
        corr = subset["Natural Gas Generation (1000 MWh)"].corr(subset["Temperature (F)"])
        correlations.append((month, corr))

# Create DataFrame for plotting
corr_df = pd.DataFrame(correlations, columns=["Month", "Correlation"])
month_names = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
               "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
corr_df["Month"] = corr_df["Month"].apply(lambda x: month_names[x - 1])

# Plot
fig, ax = plt.subplots(figsize=(10, 5))
bars = ax.bar(corr_df["Month"], corr_df["Correlation"], color="teal")
ax.set_title("Monthly Correlation: Temperature vs Natural Gas Generation (2001–2025)", fontsize=14)
ax.set_ylabel("Correlation Coefficient")
ax.set_ylim(-1, 1)
ax.grid(axis="y", linestyle="--", alpha=0.6)

# Add value labels
for bar in bars:
    height = bar.get_height()
    ax.annotate(f"{height:.2f}", xy=(bar.get_x() + bar.get_width() / 2, height),
                xytext=(0, 5), textcoords="offset points", ha="center", fontsize=10)

# Show in Streamlit
st.pyplot(fig)



st.markdown("The correlation between temperature and natural gas generation is significant, with a correlation coefficient of {:.3f}. This indicates the existence of a direct relationship. This means that as temperature increases, the amount of energy generated using natural gas also increases. The data also shows a seasonal pattern, with higher generation in the summer months when temperature and demand for natural gas is highest and lower generation in the winter months when temperature and demand for natural gas is lowest. This is so as the US experiences alot of heatwaves and needs power to keep cool.".format(corr_matrix.iloc[0, 1]))




cost_to_generate = allmerged_df[["Date", "Natural Gas Avg Cost ($/Mcf)", "Consumption (MMcf)"]].copy()
cost_to_generate = cost_to_generate[cost_to_generate["Date"].dt.year > 2007]
cost_to_generate["Cost to Generate Electricity ($/Mcf)"] = cost_to_generate["Natural Gas Avg Cost ($/Mcf)"] *  (cost_to_generate["Consumption (MMcf)"] * 1000)



st.subheader("Cost to Generate Electricity from Natural Gas(2008 - 2025)")
fig = px.line(
    cost_to_generate,
    x="Date",
    y="Cost to Generate Electricity ($/Mcf)",
    #labels={"Total Import Cost": "Total Import Cost (USD)"}
)

# Display in Streamlit
st.plotly_chart(fig)
st.markdown("explanations: https://www.eia.gov/todayinenergy/detail.php?id=50798. Plot avg price to generate electricity from natural gas")

#-------------------------------------------------------------------------------------------------------
#                                              ORLANDO COMPARISON CODE
# Natural Gas vs Solar Enegery generation cost comparison
st.subheader('Energy Generation Prices using Natural Gas vs Using Solar')
st.line_chart(comparison_df.set_index('Year'))
st.markdown("Write paragraph here")


#-------------------------------------------------------------------------------------------------------