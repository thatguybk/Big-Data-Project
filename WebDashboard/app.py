import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
import plotly.graph_objects as go

# Set Dashboard configuration
st.set_page_config(page_title="Natural Gas Environmental Impact", layout="wide")


#-------------------------------------------------------------LOAD AND CLEAN DATA----------------------------------------------------------------

# Price of Natural Gas Imports
url = "https://raw.githubusercontent.com/thatguybk/Big-Data-Project/main/WebDashboard/data/Natural_Gas_Import_Price.csv"
price_df = pd.read_csv(url, skiprows=2, parse_dates=["Date"])
price_df = price_df.rename(columns={"Price of U.S. Natural Gas Imports (Dollars per Thousand Cubic Feet)": "Price ($/Mcf)"})
price_df["Date"] = pd.to_datetime(price_df["Date"])
price_df["Date"] = pd.to_datetime(price_df["Date"]).dt.to_period("M").dt.to_timestamp()
price_df = price_df.dropna(subset=["Date", "Price ($/Mcf)"])


# Quantity of Natural Gas Imported
url = "https://raw.githubusercontent.com/thatguybk/Big-Data-Project/main/WebDashboard/data/Natural_Gas_Import_Quantity.csv"
import_df = pd.read_csv(url, skiprows=2, parse_dates=["Date"])
import_df.columns = ["Date", "Imports (MMcf)"]
import_df["Date"] = pd.to_datetime(import_df["Date"])
import_df["Date"] = pd.to_datetime(import_df["Date"]).dt.to_period("M").dt.to_timestamp()
imports_df = import_df.dropna(subset=["Date", "Imports (MMcf)"])


# Natural Gas Production Quantity
url = "https://raw.githubusercontent.com/thatguybk/Big-Data-Project/main/WebDashboard/data/Natural_Gas_Plant_Processing.csv"
quantityProduced_df = pd.read_csv(url, skiprows=6, sep=None, engine="python")
#quantityProduced_df = pd.read_csv("data/Natural_Gas_Plant_Processing.csv", skiprows=6, sep=None, engine="python")
quantityProduced_df = quantityProduced_df.rename(columns={"Month": "Date", "U.S. Natural Gas Plant Liquids Production MMcf": "Production (MMcf)"})
quantityProduced_df.columns = ["Date", "Production (MMcf)"]
quantityProduced_df["Date"] = pd.to_datetime(quantityProduced_df["Date"], errors="coerce")
quantityProduced_df["Date"] = pd.to_datetime(quantityProduced_df["Date"]).dt.to_period("M").dt.to_timestamp()
quantityProduced_df = quantityProduced_df.sort_values("Date", ascending=False).reset_index(drop=True)
quantityProduced_df = quantityProduced_df[quantityProduced_df["Date"].dt.year > 1989]
quantityProduced_df = quantityProduced_df.dropna(subset=["Date", "Production (MMcf)"])


# Natural Gas Consumption Quantity
ngConsumption_df = pd.read_csv("https://raw.githubusercontent.com/thatguybk/Big-Data-Project/main/WebDashboard/data/Natural_Gas_Deleiveries_to_Electric_Power_Consumers.csv", skiprows=2)
ngConsumption_df = ngConsumption_df.rename(columns={ "U.S. Natural Gas Deliveries to Electric Power Consumers (MMcf)": "Consumption (MMcf)"})
ngConsumption_df["Date"] = pd.to_datetime(ngConsumption_df["Date"]).dt.to_period("M").dt.to_timestamp()
ngConsumption_df = ngConsumption_df.dropna(subset=["Date", "Consumption (MMcf)"])


# Average Temperature Data
temp_df = pd.read_csv("data/TempData.csv", skiprows=3)
temp_df = temp_df.rename(columns={"Date": "Date", "Value": "Temperature (F)"})
temp_df["Date"] = temp_df["Date"].astype(str)  # Convert to string
temp_df["Date"] = pd.to_datetime(temp_df["Date"], format="%Y%m")  # Convert to datetime
temp_df["Date"] = pd.to_datetime(temp_df["Date"]).dt.to_period("M").dt.to_timestamp()
temp_df = temp_df[temp_df["Date"].dt.year > 1989]
temp_df = temp_df.dropna(subset=["Date", "Temperature (F)"])


# Solar energy Generation
solar_df = pd.read_csv("data/Solar_Energy_Generation.csv", skiprows=4)
solar_df = solar_df.rename(columns={"Month": "Date", "all utility-scale solar thousand megawatthours": "Solar Generation (1000 MWh)"}) # Standardizing column names
solar_df.columns = ["Date", "Solar Generation (1000 MWh)"]
solar_df["Date"] = pd.to_datetime(solar_df["Date"]) # Convert 'Month' column to datetime
solar_df = solar_df.sort_values("Date") # Sort the DataFrame by date
solar_df = solar_df.reset_index(drop=True)
solar_df =solar_df[solar_df["Date"].dt.year < 2025]
solar_df["Date"] = pd.to_datetime(solar_df["Date"]).dt.to_period("M").dt.to_timestamp()
solar_df = solar_df.dropna(subset=["Date", "Solar Generation (1000 MWh)"]) # Drop NAN values


# Solar Irradiance Data
irradiance_df = pd.read_csv("data/consolidated_solar_irradiance.csv")
irradiance_df = irradiance_df.drop(columns=["Source_File"])
irradiance_df['Date'] = pd.to_datetime(irradiance_df['Date'])


# Electricity Generated by Natural Gas 
ng_power_generation = pd.read_csv("data/Net_generation_for_all_sectors_monthly.csv", skiprows=4)
ng_power_generation = ng_power_generation.rename(columns={"Month": "Date", "natural gas thousand megawatthours" : "Natural Gas Generation (1000 MWh)"})
ng_power_generation = ng_power_generation.dropna(subset=["Date", "Natural Gas Generation (1000 MWh)"])
ng_power_generation["Date"] = pd.to_datetime(ng_power_generation["Date"]).dt.to_period("M").dt.to_timestamp()


# Average cost to generate electricity from Natural Gas
ng_avg_cost = pd.read_csv("data/avg_cost_to_generate_electricity.csv", skiprows=4)
ng_avg_cost = ng_avg_cost.rename(columns={"Month": "Date", "United States : natural gas dollars per mcf" : "Natural Gas Avg Cost ($/Mcf)"})
ng_avg_cost = ng_avg_cost.dropna(subset=["Date", "Natural Gas Avg Cost ($/Mcf)"])
ng_avg_cost["Date"] = pd.to_datetime(ng_avg_cost["Date"]).dt.to_period("M").dt.to_timestamp()


# Merging Data into one DataFrame 
allmerged_df = temp_df.merge(price_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(imports_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(quantityProduced_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(solar_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(ngConsumption_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(irradiance_df, on="Date", how="outer")
allmerged_df = allmerged_df.merge(ng_power_generation, on="Date", how="outer")
allmerged_df = allmerged_df.merge(ng_avg_cost, on="Date", how="outer")

allmerged_df = allmerged_df.sort_values("Date").reset_index(drop=True) # Sort and reset index

# Drop rows with no useful data
main_cols = ["Temperature (F)", "Price ($/Mcf)", "Imports (MMcf)", "Production (MMcf)", "Solar Generation (1000 MWh)", "Consumption (MMcf)", "Clearsky DHI", "Clearsky GHI", "Clearsky DNI", "GHI", "DHI", "DNI", "Natural Gas Generation (1000 MWh)", "Natural Gas Avg Cost ($/Mcf)"]
allmerged_df = allmerged_df.dropna(subset=main_cols, how="all")

allmerged_df.to_csv("cleaned_merged_dataset.csv", index=False) # Save DataFrame as CSV

allmerged_df = allmerged_df[allmerged_df["Date"].dt.year > 1998] # Filter to keep records after 1998

allmerged_df = allmerged_df.sort_values("Date").reset_index(drop=True) # Sort and reset index


# Load and process Carbon Dioxide Emissions Data
carbon_dioxide_df = pd.read_csv("data/Carbon Dioxide Emissions From Energy Consumption.csv")
carbon_dioxide_df = carbon_dioxide_df.rename(columns={ "YYYYMM": "Date", "Value": "CO2 Emissions (Million Metric Tons)"})
# carbon_dioxide_df = carbon_dioxide_df[["YYYYMM", "Value"]].rename(columns={
#     "YYYYMM": "Date",
#     "Value": "CO2 Emissions (Million Metric Tons)",
#     "Description" : "Description"
# })

carbon_dioxide_df["Date"] = pd.to_datetime(carbon_dioxide_df["Date"].astype(str), format='%Y%m', errors='coerce').dt.to_period("M").dt.to_timestamp()
carbon_dioxide_df = carbon_dioxide_df.dropna(subset=["Date"])
carbon_dioxide_df = carbon_dioxide_df.sort_values("Date").reset_index(drop=True)
carbon_dioxide_df = carbon_dioxide_df[carbon_dioxide_df["Date"].dt.year > 1998]

total_carbon_dioxide_df = carbon_dioxide_df[carbon_dioxide_df["Description"] == "Total Energy Electric Power Sector CO2 Emissions"]
#total_carbon_dioxide_df = total_carbon_dioxide_df[total_carbon_dioxide_df["Date"].dt.year > 2001]
ng_carbon_dioxide_df = carbon_dioxide_df[carbon_dioxide_df["Description"] == "Natural Gas Electric Power Sector CO2 Emissions"]
ng_carbon_dioxide_df = ng_carbon_dioxide_df.rename(columns={ "Date": "Date", "CO2 Emissions (Million Metric Tons)": "Natural Gas CO2 Emissions (Million Metric Tons)"})





# Load and process Natural Gas Prices to Generate Electricity
ng_energy_generation_prices_df = pd.read_csv("data/natural-gas-prices.csv")
ng_energy_generation_prices_df = ng_energy_generation_prices_df[['Year', 'Gas price']].rename(columns={'Gas price': 'Price ($/MWh)'})


# Load and process Levelized Cost Of Energy (LCOE) for Solar
lcoe_df = pd.read_csv("data/levelized-cost-of-energy.csv")
lcoe_df = lcoe_df[['Year', 'Solar photovoltaic levelized cost of energy']]
lcoe_df = lcoe_df.rename(columns={'Solar photovoltaic levelized cost of energy': 'Solar LCOE ($/KWh)'})
lcoe_df = lcoe_df.dropna(subset=['Solar LCOE ($/KWh)'])


# Sum monthly values for ng_power_generation to get annual values
ng_power_yearly = ng_power_generation.copy()
ng_power_yearly['Year'] = ng_power_yearly['Date'].dt.year
ng_power_yearly = ng_power_yearly.groupby('Year', as_index=False)['Natural Gas Generation (1000 MWh)'].sum()


# Merge gas prices dataframe with yearly energy generation dataframe
merged_gas = pd.merge(ng_energy_generation_prices_df, ng_power_yearly, on='Year', how='inner')


# Merge LCOE dataframe with yearly energy generation dataframe
merged_lcoe = pd.merge(lcoe_df, ng_power_yearly, on='Year', how='inner')


# Calculate Natural Gas Cost (in USD)
merged_gas['Natural Gas Cost ($ USD)'] = (
    merged_gas['Natural Gas Generation (1000 MWh)'] * 1000 *  # Convert to MWh (1 thousand MWh = 1,000 MWh)
    merged_gas['Price ($/MWh)']
)




# Calculate Solar Cost (in USD)
merged_lcoe['Solar Cost ($ USD)'] = (
    merged_lcoe['Natural Gas Generation (1000 MWh)'] * 1000 * 1000 *  # Convert to kWh (1 thousand MWh = 1,000,000 kWh)
    merged_lcoe['Solar LCOE ($/KWh)']
)


# Create comparison dataframe
comparison_df = pd.merge(
    merged_gas[['Year', 'Natural Gas Cost ($ USD)']],
    merged_lcoe[['Year', 'Solar Cost ($ USD)']],
    on='Year',
    how='inner'
)




solar_pv_module_df = pd.read_csv("data/solar-pv-prices.csv")
solar_pv_module_df = solar_pv_module_df[['Year', 'Solar photovoltaic module price']]
solar_pv_module_df = solar_pv_module_df.rename(columns={'Solar photovoltaic module price': 'Solar PV Module Price($)'})


total_imports = allmerged_df[["Imports (MMcf)", "Price ($/Mcf)", "Date"]].copy()
total_imports["Total Import Cost"] = total_imports["Price ($/Mcf)"] * ( total_imports["Imports (MMcf)"] * 1000)# Calculate Total cost to import natural gas 
total_imports = total_imports.dropna(subset=["Total Import Cost"])



# Dashboard Overview
st.title(" Renewable Energy Feasibility Dashboard (USA)")
st.markdown("This dashboard provides insights into the environmental impact of natural gas in the United States and the associated economic strain of implementing Solar power generation.") 
st.markdown("Our goal is to explore the economic implications of natural gas imports and solar power generation in the United States of America. We analyze the trends in natural gas prices and quantities imported, as well as the growth of solar energy generation over time. This analysis will help understand the potential benefits or disadvantages of transitioning to renewable energy sources. We also explore at what year it would make the most sense to implement Solar Power in the form of Photovoltaic cells, to match the amount of energy generated using natural gas.")



# Natural Gas vs Solar Energy generation cost comparison
st.subheader('Cost to generate Electricity from Natural Gas vs Solar')
st.line_chart(comparison_df.set_index('Year'))


st.markdown("The chart above shows the cost to generate electricity from Natural Gas and Solar energy over the years. The data indicates that the cost of generating electricity from Natural Gas has been consistently lower than that of Solar energy. However, the gap between the two has been narrowing, suggesting that Solar energy is becoming more competitive in terms of cost.")
st.markdown("This trend is encouraging for the future of renewable energy, as it suggests that Solar energy may soon become a more viable option for electricity generation. As technology continues to improve and costs decrease, we may see a shift towards greater adoption of Solar energy in the coming years.")
st.markdown("There are many factors that affect the price to generate electricity from Natural Gas and Solar, we will explore some of them in the next sections to identify the spike of Naatural Gas in 2022.")
st.header("Natural Gas Analysis")


# 1. Highest Monthly Import
max_import_row = allmerged_df.loc[allmerged_df["Imports (MMcf)"].idxmax()]
max_import_value = max_import_row["Imports (MMcf)"]
max_import_date = max_import_row["Date"].strftime("%b %Y")

# 2. Year with Highest Production
yearly_production = allmerged_df.groupby("Date")["Production (MMcf)"].sum()
highest_production_year = yearly_production.idxmax()
highest_production_value = yearly_production.max()

# 3. Month with Highest Cost
max_cost_row = total_imports.loc[total_imports["Total Import Cost"].idxmax()]
max_cost_value = max_cost_row["Total Import Cost"]
max_cost_date = max_cost_row["Date"].strftime("%b %Y")

# Display metrics
st.subheader("📊 Key Highlights")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric(label="📈 Highest Monthly Import", value=f"{max_import_value:,.0f} MMcf", delta=max_import_date)
with col2:
    st.metric(label="🏭 Highest Production Year", value=f"{highest_production_year.year}", delta=f"{highest_production_value:,.0f} units")
with col3:
    st.metric(label="💰 Highest Monthly Import Cost", value=f"${max_cost_value:,.0f}", delta=max_cost_date)



st.markdown("There are two ways to obtain Natural Gas, either by importing it or producing it. First we will explore the importation Natural Gas into the US.")



# Cost to Generate Energy Consumed using Natural Gas
cost_to_generate = allmerged_df[["Date", "Natural Gas Avg Cost ($/Mcf)", "Consumption (MMcf)"]].copy()
cost_to_generate = cost_to_generate[cost_to_generate["Date"].dt.year > 2007]
cost_to_generate["Cost to Generate Electricity ($/Mcf)"] = cost_to_generate["Natural Gas Avg Cost ($/Mcf)"] * (cost_to_generate["Consumption (MMcf)"] * 1000)
st.subheader("Cost to Generate Electricity from Natural Gas(2008 - 2025)")
fig = px.line(
    cost_to_generate,
    x="Date",
    y="Cost to Generate Electricity ($/Mcf)",
    #labels={"Total Import Cost": "Total Import Cost (USD)"}
)
st.plotly_chart(fig)
st.markdown("To calculate the total cost to generate the amount of electricty, we multiply the average cost to generate electricty using natural gas ($/Mcf) by the amount of natural gas consumed (MMcf). Due to these two factors being different units, the amount of natural gas consumed (MMcf) was converted to cubic feet (Mcf) by multiplying by 1000. Both factors were then multiplied to get the total cost to generate electricity. Between 2009 and 2020 the cost usually rises and falls around the same amount. However, in February 2021, the cost of generating electricity using natural gas experienced its largest spike. The cost spiked from around 2.8 Billion USD to around 13.9 Billion USD. According to Energy Information Administration (EIA), this was due to the extremely low temperatures caused by a winter storm. After the storm passed, costs returned to around 2.5 Billion USD next month. Antother large spike was experienced in August 2022, where costs rose to 12.8 Billion USD. This was likely due to the Russian invasion of Ukraine, U.S military conflict in Afghanistan, and flash flooding.")




# Natural Gas Imports 
# Total cost to import over the years


st.subheader("Total Natural Gas Import Cost (1999 - 2024)")
fig = px.line(
    total_imports,
    x="Date",
    y="Total Import Cost",
    #title="Total Natural Gas Import Cost (1989 - 2024)",
    labels={"Total Import Cost": "Total Import Cost (USD)"}
)
st.plotly_chart(fig)
st.markdown("By multiplying the import prices of natural gas by the quantities imported, we can see the total costs to import natural gas. Nearing the end of 2005 the total costs to import natural gas spiked to around 4.4 Billion USD. This is likely due to the devastating hurricanes that occurred around that time. In April 2020, the total costs to import natural gas dropped to around 285 Million USD. This is likely due to the Covid-19 pandemic and a surplus of natural gas imported and produced in the previous months. In December 2022 the total cost rose to around 2.86 billion USD due to the Russian invasion of Ukraine creating disruptions and shortages according to the article 'Reasons behind the 2022 energy price increases and prospects for next year'.")
st.markdown("According to the US Energy Information Administration, temperature plays a major role in the price to import natural gas.")


# Temperature Analysis
st.subheader("Temperature (1999 - 2025)")
st.markdown("This chart illustrates the temperature trends in the U.S from 1999 to 2025.")

fig = px.line(allmerged_df.dropna(subset=["Temperature (F)"]), x="Date", y="Temperature (F)")
st.plotly_chart(fig)

st.markdown("The data shows a steady increase in temperature, which is consistent with the global trend of rising temperatures due to climate change. In other words, there are higher highs and higher lows. The lowest average temperature was in February 2010 due to a blizzard whereas the highest average temperature was in November 2024 due to increased greenhouse gas emissions and ocean heat absorption. The data also shows seasonal variations, with higher temperatures in the summer months and lower temperatures in the winter months. As temperature decreases the demand for natural gas increases, leading to higher prices. The data shows a clear correlation between temperature and the price of natural gas imports. For example, in February 2014, the average temperature in the U.S was significantly lower than in previous years, leading to a spike in natural gas import prices. This trend is also evident in the winter of 2000/2001, when low temperatures led to increased demand for natural gas and higher prices. ")

# Natural Gas Import Price vs Temperature Correlation
corr_df = allmerged_df[["Price ($/Mcf)", "Temperature (F)", "Date"]].dropna(subset=["Price ($/Mcf)", "Temperature (F)"])
correlation = corr_df[["Price ($/Mcf)", "Temperature (F)"]].corr() # Compute correlation matrix

st.subheader("Correlation Between Temperature and Natural Gas Import Price")
fig, ax = plt.subplots(figsize=(4,1.8))
sns.heatmap(correlation, annot=True, cmap="RdGy" , fmt=".2f", ax=ax)
st.pyplot(fig)




# Seasonal Correlation Between Temperature and Natural Gas Import Price
def get_season(month):
    if month in [12, 1, 2, 3]:
        return "Winter"
    elif month in [4, 5]:
        return "Spring"
    elif month in [6, 7, 8]:
        return "Summer"
    else:
        return "Autumn"

corr_df["Season"] = corr_df["Date"].dt.month.apply(get_season)
season_correlations = corr_df.groupby("Season")[["Temperature (F)", "Price ($/Mcf)"]].corr().iloc[0::2, -1].reset_index() # Calculate correlations for each season

fig, ax = plt.subplots(figsize=(7,2))
sns.barplot(data=season_correlations, x="Season", y="Price ($/Mcf)", palette="Accent", ax=ax)
ax.set_title("Correlation Between Temperature and Gas Price by Season")
ax.set_ylabel("Correlation Coefficient")
ax.set_ylim(-1, 1)
ax.axhline(0, color='gray', linestyle='--')
st.pyplot(fig)

st.markdown("The correlation between temperature and natural gas price is significant, with a correlation coefficient of {:.3f}. This indicates the existence of an inverse relationship between temperature and natural gas price. This means that as temperature decreases, the price of natural gas increases. The data also shows a seasonal pattern, with higher prices in the winter months when demand for natural gas is highest.".format(correlation.loc['Temperature (F)', 'Price ($/Mcf)']))

st.markdown("The correlation coefficient for each season is as follows:")
for season, corr in zip(season_correlations['Season'], season_correlations['Price ($/Mcf)']):
    st.markdown(f"- **{season}:** {corr:.3f}")

st.markdown("Since the Winter season has the largest negative correlation coefficient, the inverse relationship between temperature and natural gas price is more pronounced than in the other seasons. The correlation is skewed due to other factors, such as natural disasters and supply chain disruptions, affecting the price of natural gas.")

# Total Natural Gas Import Quantities over the years
st.subheader("U.S. Natural Gas Import Quantities (1999 - 2024)")
fig = px.line(
    total_imports,
    x="Date",
    y="Imports (MMcf)",
    labels={"U.S. Natural Gas Imports (MMcf)": "Natural Gas Imported (MMcf)"}
)
st.plotly_chart(fig)
st.markdown("The quantity of natural gas imported into the US has fluctuated over the years, with notable peaks and troughs. The data shows a steady increase in the quantity of natural gas imported until 2008, reflecting the growing demand for natural gas in the US. After 2008 the US increased its domestic production of natural gas. The data also shows seasonal variations, with higher imports in the winter months and lower imports in the summer months. This trend is consistent with the seasonal demand for natural gas. We will now explore the production of Natural Gas in the US.")



# Natural Gas Production
st.markdown("")

# Natural Gas Production over the years
st.subheader("Natural Gas Production Data (1999 - 2024)")
fig = px.line(allmerged_df[["Production (MMcf)", "Date"]], x="Date", y="Production (MMcf)")
fig.update_layout(yaxis_title="Natural Gas Produced (Million Cublic Feat MMcf)", xaxis_title="Date")
st.plotly_chart(fig)
st.markdown("U.S Natural Gas production hit an all time high in 2024 after gradually increasing in quantity over the years. Import prices for natural gas were also slightly increasing as production quantities increased in 2024. When compared to natural gas import quantities, it can also be seen that an inverse relationship exists where the quantity of natural gas produced decreases as the quantity of natural gas imports increase.")





# Correlation Matrix: Natural Gas Imports vs Production Quantities
corr_df = allmerged_df[["Production (MMcf)", "Imports (MMcf)", "Date"]].dropna(subset=["Production (MMcf)", "Imports (MMcf)"])
correlation = corr_df[["Production (MMcf)", "Imports (MMcf)"]].corr() # Compute correlation matrix

st.subheader("Correlation Matrix: Natural Gas Imports vs Production")
fig, ax = plt.subplots(figsize=(4, 1.8))
sns.heatmap(correlation, annot=True, cmap="crest", ax=ax)
st.pyplot(fig)

st.markdown(f"The above graphs show a negative correlation of {correlation.iloc[0, 1]:.2f}. This indicates an inverse relationship between the quantity of natural gas produced and the quantity of natural gas imported. This means that as the quantity of natural gas imports decreases, the quantity of natural gas produced increases. This trend is consistent with the growing domestic production of natural gas in the US, which has led to a decrease in imports.")


st.subheader("CO2 Emissions from Natural Gas Generation (1999 - 2024)")
fig = px.line(
    ng_carbon_dioxide_df,
    x="Date",
    y="Natural Gas CO2 Emissions (Million Metric Tons)",
    color_discrete_sequence=["firebrick"]
)
st.plotly_chart(fig, use_container_width=True)

st.markdown("The data shows a steady increase in CO2 emissions from natural gas generation. Compared to Solar energy, which is minimal only releasing CO2 during the manufacturing process, Natural Gas as an energy source has a significant impact on the environment. This highlights the importance of transitioning to renewable energy sources, such as solar energy, to reduce greenhouse gas emissions and mitigate climate change.") 


# st.subheader("Natural Gas Generation (2001 - 2024)")
# fig = px.line(
#     allmerged_df[["Date","Natural Gas Generation (1000 MWh)"]],
#     x="Date",
#     y="Natural Gas Generation (1000 MWh)",
#     color_discrete_sequence=["steelblue"]
# )
# st.plotly_chart(fig)






st.header("Solar Analysis")
st.markdown("Factors such as the price of solar panels, maintenance cost, cost of installation and even the location also play a role in the feasibility of implementing solar power generation from an economic standpoint. We will explore these factors to understand the feasibility of implementing solar power generation in the US.")

st.subheader("Solar Photovoltaic (PV) Module Price Distribution Over Years")
fig = px.bar(
    solar_pv_module_df,
    x="Year",
    y="Solar PV Module Price($)",
    color_discrete_sequence=["gold"]
)
st.plotly_chart(fig, use_container_width=True)
st.markdown("The price of Solar Photovoltaic (PV) panels have gradually decreased over the years. Prices hit an all time low of 0.31 USD per Watt in 2023. This trend is likely due to the increased production, popularity and availability of solar panels and energy. According to a blog post on Our World In Data, solar pv panel prices abide by 'Wrights Law'. Wrights Law states that the cost of technology falls consistently as the cumulative production of that technology increases.")

st.subheader("Levelized Cost of Energy (LCOE) for Solar")
st.markdown("One consolodated way to measure the cost of implimenting solar power generation is to use the Levelized Cost of Energy (LCOE). The LCOE is a measure of the average cost of generating electricity over the lifetime of a power plant. It takes into account the initial capital costs, operating and maintenance costs, and the expected energy production over the lifetime of the plant.")


fig = px.line(
    lcoe_df,
    x="Year",
    y="Solar LCOE ($/KWh)",
    color_discrete_sequence=["gold"]
)
st.plotly_chart(fig)

st.markdown("The LCOE for solar energy has been steadily decreasing over the years, reflecting the declining costs of solar technology and increasing efficiency. The data shows that the LCOE for solar energy is now comparable to that of natural gas, making it a more competitive option for electricity generation. This trend is encouraging for the future of renewable energy, as it suggests that solar energy may soon become a more viable option for electricity generation. As technology continues to improve and costs decrease, we may see a shift towards greater adoption of solar energy in the coming years.")


st.subheader("Solar Energy Generation (2001 - 2024)")
fig = px.line(
    allmerged_df,
    x="Date",
    y="Solar Generation (1000 MWh)",
    color_discrete_sequence=["gold"]
)
st.plotly_chart(fig)

st.markdown("The data shows a steady increase in solar energy generation over the years, with peaks in the heated summer months. This trend is consistent with the growing adoption of solar energy in the US, as more households and businesses install solar panels to generate their own electricity. The data also shows seasonal variations, with higher generation in the summer months and lower generation in the winter months. This trend is consistent with the seasonal availability of sunlight, which is highest in the summer months and lowest in the winter months.") 


st.subheader("Solar Energy Generation Cost (2010 - 2023)")
fig = px.line(
    merged_lcoe,
    x="Year",
    y="Solar Cost ($ USD)",
    color_discrete_sequence=["gold"]
)
st.plotly_chart(fig)


st.markdown("The cost of generating electricity from solar energy has been steadily decreasing over the years, reflecting the declining costs of solar technology. This trend is encouraging for the future of renewable energy, as it suggests that solar energy may soon become a more viable option for electricity generation. As technology continues to improve and costs decrease, we may see a shift towards greater adoption of solar energy in the near future. ")



